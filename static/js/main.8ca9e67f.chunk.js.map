{"version":3,"sources":["serviceWorker.js","Images.js","Click.js","Main.js","Output.js","index.js"],"names":["Boolean","window","location","hostname","match","Main","className","products","map","product","index","key","src","img","alt","React","Component","Click","props","handleClick","setState","value","state","console","log","bind","onClick","this","Title","Id","Maker","Description","Url","Output","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qDCdeC,E,iLAIb,OACI,yBAAKC,UAAU,OACVC,EAASC,KAAI,SAACC,EAASC,GAChB,OAEI,yBAAKC,IAAKD,EAAOJ,UAAU,SAEnB,yBAAKM,IAAKH,EAAQI,IAAKC,IAAI,uB,GAX7BC,IAAMC,W,OCFnBC,G,kBACjB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAOPC,YAAe,WAEd,EAAKC,SAAS,CAACC,MAAM,EAAKC,MAAMD,MAAQ,IAExCE,QAAQC,IAAI,EAAKF,MAAMD,QAVvB,EAAKC,MAAQ,CAACD,MAAO,GAGrB,EAAKF,YAAc,EAAKA,YAAYM,KAAjB,gBALF,E,sEAgBf,OAER,2BACQ,4BAAQnB,UAAU,kBAAmBoB,QAASC,KAAKR,aAAnD,IAAkEQ,KAAKL,MAAMD,Y,GApBlDN,IAAMC,YCIpBX,E,iLAIb,OACI,6BAECE,EAASC,KAAI,SAACC,EAASC,GAChB,OAGY,yBAAKJ,UAAU,OAAOK,IAAKD,GAEvB,wBAAIJ,UAAU,SAAd,8CAAmF,2BAAIG,EAAQmB,QAC/F,wBAAItB,UAAU,MAAK,yCAAnB,qEAA2IG,EAAQoB,IACnJ,wBAAIvB,UAAU,SAAQ,4CAAtB,4CAA4GG,EAAQqB,OACpH,uBAAGxB,UAAU,eAAc,oDAAgC,2BAAIG,EAAQsB,cACxE,2BAAG,mGAAH,IAA+G,2BAAItB,EAAQuB,MAC3H,6BAWA,kBAAC,EAAD,e,GA7BDjB,IAAMC,WCFnBiB,E,iLAIb,OACI,6BACA,yBAAK3B,UAAU,OACX,yBAAKA,UAAU,UAAf,IAAyB,kBAAC,EAAD,OAEtB,yBAAKA,UAAU,UAAS,kBAAC,EAAD,a,GATPS,IAAMC,WCK1CkB,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SL0H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ca9e67f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport products from './products.json';\r\nimport './main.css';\r\n\r\nexport default class Main extends React.Component{\r\n \r\n\r\n    render(){\r\n        return(\r\n            <div className=\"img\">\r\n                {products.map((product, index)=>{\r\n                        return(\r\n                            \r\n                            <div key={index} className=\"album\">  \r\n                                \r\n                                    <img src={product.img} alt=\"not found\" /> \r\n                                    \r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            \r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './Click.css';\r\nexport default class Click extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {value: 0};\r\n  \r\n      // This binding is necessary to make `this` work in the callback\r\n      this.handleClick = this.handleClick.bind(this);\r\n    }\r\n  \r\n     handleClick = (() => {  \r\n        \r\n      this.setState({value:this.state.value + 1});\r\n    \r\n      console.log(this.state.value);\r\n    });\r\n    render(){\r\n        \r\n        return(\r\n            \r\n<p>\r\n        <button className=\"btn fa fa-heart\"  onClick={this.handleClick}> {this.state.value}</button>\r\n</p>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport products from './products.json';\r\nimport './main.css';\r\nimport Click from './Click.js';\r\nimport './Click.css'\r\n\r\nexport default class Main extends React.Component{\r\n \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                    \r\n            {products.map((product, index)=>{\r\n                    return(\r\n                        \r\n                       \r\n                                <div className=\"desc\" key={index}>\r\n                                    \r\n                                    <h4 className=\"title\">&nbsp;Title&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <i>{product.Title}</i></h4> \r\n                                    <h5 className=\"Id\"><b>&nbsp;&nbsp;Id</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;{product.Id}</h5>\r\n                                    <h5 className=\"Maker\"><b>&nbsp;&nbsp;Maker</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;{product.Maker}</h5>\r\n                                    <p className=\"Description\"><b>&nbsp;&nbsp;Description: </b><i>{product.Description}</i></p>\r\n                                   <p><b>&nbsp;&nbsp;Url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</b> <i>{product.Url}</i></p> \r\n                                   <br />\r\n                                   {/* <button  className=\"buy-button snipcart-add-item\" data-item-id={product.Id} \r\n                                   data-item-price={product.price} \r\n                                   data-item-url={product.Url} \r\n                                   data-item-name={product.Title} \r\n                                   data-item-image={product.img}\r\n                                   data-item-custom1-name=\"Frame color\"\r\n                                   data-item-custom1-options=\"Black|Brown[+100.00]|Gold[+300.00]\"\r\n                                   >Add to cart</button> */}\r\n                                   \r\n                                   {/* <button class=\"snipcart-checkout\">Click here to checkout</button> */}\r\n                                   <Click />\r\n                                   \r\n                                \r\n                                </div>\r\n                            \r\n                          \r\n                    )\r\n                })}\r\n            </div>\r\n            // <div>\r\n            //     {products.map((product, index)=>{\r\n            //             return(\r\n                            \r\n            //                 <div className=\"container\" key={index}>  \r\n            //                     <div className=\"row\">\r\n            //                         <div className=\"col-md-2 col-sm-2 col-lg-2 s\">\r\n            //                             <img src={product.img} /> \r\n            //                         </div>\r\n            //                         <div className=\"col-md-10 col-sm-10 col-lg-10 \">\r\n            //                             <h4 className=\"title\">Title&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <i>{product.Title}</i></h4> \r\n            //                             <h5 className=\"id\"><b>Id</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;{product.Id}</h5>\r\n            //             <h5 className=\"maker\"><b>Maker</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;{product.Maker}</h5>\r\n            //                             <p className=\"Description\"><b>Description: </b><i>{product.Description}</i></p>\r\n            //                            <p><b>Url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</b> <i>{product.Url}</i></p> \r\n            //                            <Click />\r\n                                    \r\n                                    \r\n            //                         </div>\r\n            //                     </div>\r\n            //                 </div>\r\n                              \r\n            //             )\r\n            //         })}\r\n            //     </div>\r\n            \r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './main.css';\r\nimport Images from './Images';\r\nimport Main from './Main';\r\nexport default class Output extends React.Component{\r\n \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <div className=\"top\" >\r\n                <div className=\" item1\"> <Images /></div>\r\n                   \r\n                   <div className=\" item2\"><Main /></div>\r\n                     \r\n            </div>\r\n            \r\n            </div>\r\n\r\n                 \r\n                                \r\n\r\n            \r\n            \r\n\r\n            // <div>\r\n            //     {products.map((product, index)=>{\r\n            //             return(\r\n                            \r\n            //                 <div className=\"container\" key={index}>  \r\n            //                     <div className=\"row\">\r\n            //                         <div className=\"col-md-2 col-sm-2 col-lg-2 s\">\r\n            //                             <img src={product.img} /> \r\n            //                         </div>\r\n            //                         <div className=\"col-md-10 col-sm-10 col-lg-10 \">\r\n            //                             <h4 className=\"title\">Title&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <i>{product.Title}</i></h4> \r\n            //                             <h5 className=\"id\"><b>Id</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;{product.Id}</h5>\r\n            //             <h5 className=\"maker\"><b>Maker</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;{product.Maker}</h5>\r\n            //                             <p className=\"Description\"><b>Description: </b><i>{product.Description}</i></p>\r\n            //                            <p><b>Url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</b> <i>{product.Url}</i></p> \r\n            //                            <Click />\r\n                                    \r\n                                    \r\n            //                         </div>\r\n            //                     </div>\r\n            //                 </div>\r\n                              \r\n            //             )\r\n            //         })}\r\n            //     </div>\r\n            \r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Output from './Output';\nimport Main from './Main';\nimport Images from './Images';\n\nReactDOM.render(<Output />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}